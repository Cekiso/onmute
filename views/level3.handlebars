<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="/timeout.js"></script>
    <link href='https://fonts.googleapis.com/css?family=Gorditas' rel='stylesheet'>

    <title>Document</title>
    <style>
        body {
            background-image: url(/signsN.jpg);
            background-repeat: space;
            color: rgb(240, 99, 106);
            font-family: 'Gorditas';
            font-size: 22px;
        }

        .overall {
            margin: auto;
            width: 50%;
            padding: 2em;
            background-color: white;
            text-align: center;
            justify-content: center;
            align-content: center;
            border: solid black;
        }

        .back1 a button {
            width: 150px;
            height: 50px;
            background-color: whitesmoke;
            border: 1px solid wheat;
            color: black;
            outline: none;
            transition: .6s ease;
            border-radius: 25px;
            margin: 9%;
        }

       .allOptions {
            display: flex;
            justify-content: space-around;

        }
        .back1 a button:hover {
        cursor: pointer;
        background-color: rgb(240, 99, 106);
        color: black;
        box-shadow: 0 0 5px white, 0 0 10px white, 0 0 15px white;
        font-weight: bold;
        }

        .button button {
            width: 100px;
            height: 50px;
            background-color: whitesmoke;
            border: 1px solid wheat;
            color: black;
            outline: none;
            transition: .6s ease;
            border-radius: 25px;
        }

        .button button:hover {
            cursor: pointer;
            background-color: rgb(238, 232, 221);
            color: black;
            box-shadow: 0 0 5px white, 0 0 10px white, 0 0 15px white;
            font-weight: bold;
        }

        .hidden {
            display: none;
        }

        
    </style>
</head>
<body>
    <div class="overall">
        <h2>LEVEL3</h2>
        <form action="level3" method="POST">
            <div class="question" name="question">Please show me <strong>Please</strong></div>
            <button type="button" onclick="init()" class="start">Start</button>
            {{!-- <button type="button" onclick="stop()" class="start">stop</button> --}}

            <div><canvas id="canvas"></canvas></div>
            <div id="label-container"></div>
            <div class="results"></div>
            <div class="points"></div>
            {{!-- <div class="button hidden">
                <a href="./level2"> <button>Next</button></a>
            </div> --}}
            <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js"></script>
            <script
                src="https://cdn.jsdelivr.net/npm/@teachablemachine/pose@0.8/dist/teachablemachine-pose.min.js"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.24.0/axios.min.js"
                integrity="sha512-u9akINsQsAkG9xjc1cnGF4zw5TFDwkxuc9vUp5dltDWYCSmyd0meygbvgXrlc/z7/o4a19Fb5V0OUE58J7dcyw=="
                crossorigin="anonymous" referrerpolicy="no-referrer"></script>

            <script type="text/javascript">
                // More API functions here:
                // https://github.com/googlecreativelab/teachablemachine-community/tree/master/libraries/pose
                // the link to your model provided by Teachable Machine export panel
                const URL = "https://teachablemachine.withgoogle.com/models/ujg-F0UkQ/";
                let model, webcam, ctx, labelContainer, maxPredictions, showResults, button, score, over, badge;
                //let challengeElem = document.querySelector('.challenge')
                //let currentSign

                //function getCurrentSign(username) {
                //axios.get('/challenge/' + username)
                // .then(function (result) {
                //  console.log(result)
                //challengeElem.innerHTML = result.data.challenge
                //currentSign = result.data.challenge

                // })
                //  }
                //getCurrentSign('Mila')

                // function submitSign(username, sign) {
                //  return axios.post('/submit/sign/' + username)
                //}
                async function init() {
                    const modelURL = URL + "model.json";
                    const metadataURL = URL + "metadata.json";
                    // load the model and metadata
                    // Refer to tmImage.loadFromFiles() in the API to support files from a file picker
                    // Note: the pose library adds a tmPose object to your window (window.tmPose)
                    model = await tmPose.load(modelURL, metadataURL);
                    maxPredictions = model.getTotalClasses();
                    // Convenience function to setup a webcam
                    const size = 200;
                    const flip = true; // whether to flip the webcam
                    webcam = new tmPose.Webcam(size, size, flip); // width, height, flip
                    await webcam.setup(); // request access to the webcam
                    await webcam.play();
                    window.requestAnimationFrame(loop);
                    // append/get elements to the DOM
                    const canvas = document.getElementById("canvas");
                    score = document.querySelector('.points')
                    canvas.width = size;
                    canvas.height = size;
                    ctx = canvas.getContext("2d");

                    labelContainer = document.getElementById("label-container");
                    showResults = document.querySelector('.results')
                    button = document.querySelector('.button')
                    over = document.querySelector('.overall')
                    badge = document.innerHTML('.trophy')
                    //for (let i = 0; i < maxPredictions; i++) { // and class labels
                    //  labelContainer.appendChild(document.createElement("div"));
                    // }
                }
                async function loop(timestamp) {
                    webcam.update(); // update the webcam frame
                    await predict();
                    window.requestAnimationFrame(loop);
                }
                let reward = 0;

                let skip = false;

                async function predict() {

                    if (skip) {
                        return;
                    }

                    skip = true;

                    setTimeout(function () {
                        skip = false;
                    }, 1000);

                    // Prediction #1: run input through posenet
                    // estimatePose can take in an image, video or canvas html element
                    const {
                        pose,
                        posenetOutput
                    } = await model.estimatePose(webcam.canvas);
                    // Prediction 2: run input through teachable machine classification model
                    const prediction = await model.predict(posenetOutput);

                    // get the max prediction
                    let maxPredi = 0;
                    let classNameLabel;
                    for (let props of prediction) {
                        if (props.probability > maxPredi) {
                            maxPredi = props.probability
                            classNameLabel = props.className
                        }
                    }
                    console.log({
                        maxPredi,
                        classNameLabel
                    })
                    if (classNameLabel != 'Please') {
                        showResults.innerHTML = 'Please keep on trying'
                    }
                    else if (classNameLabel === 'Please' && maxPredi >= 0.88) {

                        // update that the current sign was identofied by the user
                        showResults.innerHTML = 'You are correctðŸ¥³';
                        //button.classList.remove('hidden')
                        reward = 'You have earned 9 PXs'
                        score.innerHTML = (reward)
                        badge.innerHTML =
                            party.confetti(over, {
                                shapes: ["square"]
                            })
                        badge.innerHTML = ''
                        stop()
                    }
                    labelContainer.innerHTML = classNameLabel;
                    // finally draw the poses
                    drawPose(pose);
                }

                function drawPose(pose) {
                    if (webcam.canvas) {
                        ctx.drawImage(webcam.canvas, 0, 0);
                        // draw the keypoints and skeleton
                        if (pose) {
                            const minPartConfidence = 0.5;
                            tmPose.drawKeypoints(pose.keypoints, minPartConfidence, ctx);
                            tmPose.drawSkeleton(pose.keypoints, minPartConfidence, ctx);
                        }
                    }
                }
                async function stop() {
                    await webcam.stop()
                    console.log('stoping');
                }
            </script><br>



              <div class="allOptions">
                <div class="option1">
<img src="/img_20211203_101259_086.jpg" alt="">


                </div>
                <div class="option2">

<img src="/Webp.net-resizeimage.jpg" alt="">

                </div>
                <div class="option3">

<img src="/img_20211203_101259_086.jpg" alt="">
                </div>
    </div>

    {{#each levels}}
    <ul>
        <a href="/counter/{{game}}">{{game}}</a>
    </ul>
    {{/each}}

    {{!-- <div class="trophy">

    </div> --}}

    <div class="back1">
        <a href="/"> <button>Home</button></a>
    </div>

    {{!-- <form action="./challenge" method="POST">
        <div class="button hidden">
            <button type="submit" name="next">Next</button>
        </div>
    </form> --}}




    </div>
    <script src="https://cdn.jsdelivr.net/npm/party-js@latest/bundle/party.min.js"></script>
</body>

</html>